{"version":3,"sources":["Store.tsx","App.tsx","Actions.ts","HomePage.tsx","FavPage.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","episodes","favourites","airdate","airstamp","airtime","id","image","medium","original","name","Store","React","createContext","reducer","state","action","type","payload","App","props","useContext","Fragment","className","to","process","length","children","fetchDataAction","dispatch","a","fetch","data","json","dataJSON","_embedded","toggleFavAction","episode","episodeInFav","includes","dispatchObj","filter","fav","EpisodeList","lazy","HomePage","useEffect","store","console","log","ep","Suspense","fallback","FavPage","Boolean","window","location","hostname","match","RouterPage","pageComponent","ReactDOM","render","useReducer","Provider","value","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e60bd042.chunk.js","sourcesContent":["import React from 'react';\nimport { IAction, IState} from './interfaces';\n\nconst defaultFAV = {\n  airdate: \"2013-12-09\",\n  airstamp: \"2013-12-10T03:30:00+00:00\",\n  airtime: \"22:30\",\n  id: 14309,\n  image: { medium: \"http://static.tvmaze.com/uploads/images/medium_landscape/15/37913.jpg\", original: \"\"},\n  name: \"Lawnmower Dog\",\n  \"url\": \"http://www.tvmaze.com/episodes/14309/rick-and-morty-1x02-lawnmower-dog\",\n};\n\nconst initialState: IState= {\n  episodes: [],\n  favourites: [defaultFAV,],\n};\n\nexport const Store = React.createContext<IState | any>(initialState);\n\nconst reducer = (state: IState, action: IAction): IState => {\n  switch (action.type) {\n    case 'FETCH_DATA':\n      return { ...state, episodes: action.payload };\n    case 'ADD_FAV':\n      return { ...state, favourites: [ ...state.favourites, action.payload] };\n    case 'REMOVE_FAV':\n      //replace favourites with the new list of favs\n      return { ...state, favourites: action.payload}\n    default:\n      return state;\n  }\n};\n\nexport const StoreProvider = (children: JSX.ElementChildrenAttribute) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  return <Store.Provider value={{state, dispatch}}>\n    {children.children}\n  </Store.Provider>\n};\n","import React from 'react';\nimport './App.css';\nimport {Link} from '@reach/router';\nimport { Store } from './Store';\n\nconst App = (props: any): JSX.Element => {\n  const { state } = React.useContext(Store);\n\n  return (\n    <React.Fragment>\n      <header className=\"header\">\n        <div>\n          <h1>Rick and Morty</h1>\n          <p>Pick your favourite episode!</p>\n        </div>\n        <nav>\n          <Link className=\"link\" to={process.env.PUBLIC_URL + '/'}>Home</Link>\n          <Link className=\"link\" to={process.env.PUBLIC_URL + '/faves'}>Favourites: {state.favourites.length}</Link>\n        </nav>\n      </header>\n      {props.children}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import { IAction, IEpisode, IState } from './interfaces';\nimport { Dispatch } from \"react\";\n\n// get episodes data\nexport const fetchDataAction = async (dispatch: Dispatch<IAction>) => {\n  const URL = \"https://api.tvmaze.com/singlesearch/shows?q=rick-&-morty&embed=episodes\";\n  const data = await fetch(URL);\n  const dataJSON = await data.json();\n\n  return dispatch({\n    type: 'FETCH_DATA',\n    payload: dataJSON._embedded.episodes,\n  })\n};\n\n// add to favourites or remove if it is fav already\nexport const toggleFavAction = (state: IState, episode: IEpisode | any, dispatch: any): IAction => {\n  const episodeInFav = state.favourites.includes(episode);\n  let dispatchObj = {\n    type: 'ADD_FAV',\n    payload: episode,\n  };\n  if (episodeInFav) {\n    // filter items and remove the one with the episode id\n    const favWithoutEpisode = state.favourites.filter((fav: IEpisode) => fav.id !== episode.id);\n    dispatchObj = {\n      type: 'REMOVE_FAV',\n      payload: favWithoutEpisode,\n    }\n  }\n  return dispatch(dispatchObj);\n};","import React from 'react';\nimport { Store } from './Store';\nimport { IEpisodeProps } from './interfaces';\nimport { fetchDataAction, toggleFavAction } from './Actions';\n\nconst EpisodeList = React.lazy<any>(() => import('./EpisodeList'));\n\nconst HomePage = () => {\n  const { state, dispatch } = React.useContext(Store);\n\n  React.useEffect(() => {\n    state.episodes.length === 0 && fetchDataAction(dispatch)\n  });\n\n  const props: IEpisodeProps = {\n    episodes: state.episodes,\n    store: {state, dispatch},\n    toggleFavAction,\n    favourites: state.favourites,\n  };\nconsole.log(props.episodes.filter(ep => ep.id === 14309));\n  return (\n    <React.Fragment>\n      <React.Suspense fallback={<div>loading ... </div>}>\n          <section className=\"episode-layout\">\n              <EpisodeList {...props} />\n          </section>\n      </React.Suspense>\n    </React.Fragment>\n  )\n};\n\nexport default HomePage;","import React from 'react';\nimport { Store } from './Store';\nimport { toggleFavAction } from './Actions';\nimport { IEpisodeProps } from './interfaces';\n\nconst EpisodeList = React.lazy<any>(() => import('./EpisodeList'));\n\nconst FavPage = (): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store);\n\n  const props: IEpisodeProps = {\n    episodes: state.favourites,\n    store: { state, dispatch },\n    toggleFavAction,\n    favourites: state.favourites,\n  };\n\n  return (\n    <React.Suspense fallback={<div>loading ... </div>}>\n      <section className=\"episode-layout\">\n        <EpisodeList {...props} />\n      </section>\n    </React.Suspense>\n  )\n};\n\nexport default FavPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider } from './Store';\nimport { Router, RouteComponentProps } from \"@reach/router\";\nimport HomePage from \"./HomePage\";\nimport FavPage from \"./FavPage\";\nimport * as serviceWorker from './serviceWorker';\n\nconst RouterPage = (props: {pageComponent: JSX.Element} & RouteComponentProps) => props.pageComponent;\nReactDOM.render(\n  <StoreProvider>\n    <Router>\n      <App path=\"/\" >\n        <RouterPage pageComponent={<HomePage />} path=\"/\" />\n        <RouterPage pageComponent={<FavPage />} path=\"/faves\" />\n      </App>\n    </Router>\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}