{"version":3,"sources":["Store.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["initialState","episodes","favourites","Store","React","createContext","reducer","state","action","type","payload","EpisodeList","lazy","App","useContext","dispatch","useEffect","length","fetchDataAction","a","fetch","data","json","dataJSON","_embedded","episodeInFav","episode","includes","props","toggleFavAction","dispatchObj","filter","fav","id","Fragment","console","log","className","Suspense","fallback","Boolean","window","location","hostname","match","ReactDOM","render","useReducer","Provider","value","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yzBAGA,IAAMA,EAAsB,CAC1BC,SAAU,GACVC,WAAY,IAGDC,EAAQC,IAAMC,cAA4BL,GAEjDM,EAAU,SAACC,EAAeC,GAC9B,OAAQA,EAAOC,MACb,IAAK,aACH,OAAO,EAAP,GAAYF,EAAZ,CAAmBN,SAAUO,EAAOE,UACtC,IAAK,UACH,OAAO,EAAP,GAAYH,EAAZ,CAAmBL,WAAW,GAAD,mBAAOK,EAAML,YAAb,CAAyBM,EAAOE,YAC/D,IAAK,aAEH,OAAO,EAAP,GAAYH,EAAZ,CAAmBL,WAAYM,EAAOE,UACxC,QACE,OAAOH,ICfPI,EAAcP,IAAMQ,MAAU,kBAAM,gCAsE3BC,EAlEH,WAAoB,IAAD,EACDT,IAAMU,WAAWX,GAArCI,EADqB,EACrBA,MAAOQ,EADc,EACdA,SAEfX,IAAMY,WAAU,WACY,IAA1BT,EAAMN,SAASgB,QAAgBC,OAIjC,IAAMA,EAAe,uCAAG,8BAAAC,EAAA,sEACHC,MAXX,2EAUc,cAChBC,EADgB,gBAECA,EAAKC,OAFN,cAEhBC,EAFgB,yBAGfR,EAAS,CACdN,KAAM,aACNC,QAASa,EAASC,UAAUvB,YALR,2CAAH,qDASfwB,EAAe,SAACC,GACpB,OAAOnB,EAAML,WAAWyB,SAASD,IAqB7BE,EAAQ,CACZ3B,SAAUM,EAAMN,SAChB4B,gBAnBsB,SAACH,GAEvB,IAAII,EAAc,CAChBrB,KAAM,UACNC,QAASgB,GAEPD,EAAaC,KAGfI,EAAc,CACZrB,KAAM,aACNC,QAHwBH,EAAML,WAAW6B,QAAO,SAACC,GAAD,OAAmBA,EAAIC,KAAOP,EAAQO,QAM1F,OAAOlB,EAASe,IAMhBL,gBAGF,OACE,kBAAC,IAAMS,SAAP,KACGC,QAAQC,IAAI7B,GACb,4BAAQ8B,UAAU,UAChB,6BACE,8CACA,4DAEF,8CACiB9B,EAAML,WAAWe,SAGpC,kBAAC,IAAMqB,SAAP,CAAgBC,SAAU,8CACxB,6BAASF,UAAU,kBACjB,kBAAC1B,EAAgBiB,OCxDPY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,mBHgB2B,SAAClB,GAAgB,IAAD,EACjBxB,IAAM2C,WAAWzC,EAASN,GADT,mBACpCO,EADoC,KAC7BQ,EAD6B,KAE3C,OAAO,kBAACZ,EAAM6C,SAAP,CAAgBC,MAAO,CAAC1C,QAAOQ,aACnCa,EAAMsB,YGnBT,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.b51e05fd.chunk.js","sourcesContent":["import React from 'react';\nimport { IAction, IState} from \"./interfaces\";\n\nconst initialState: IState= {\n  episodes: [],\n  favourites: [],\n};\n\nexport const Store = React.createContext<IState | any>(initialState);\n\nconst reducer = (state: IState, action: IAction): IState => {\n  switch (action.type) {\n    case 'FETCH_DATA':\n      return { ...state, episodes: action.payload };\n    case 'ADD_FAV':\n      return { ...state, favourites: [ ...state.favourites, action.payload] };\n    case 'REMOVE_FAV':\n      //replace favourites with the new list of favs\n      return { ...state, favourites: action.payload}\n    default:\n      return state;\n  }\n};\n\nexport const StoreProvider = (props: any) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  return <Store.Provider value={{state, dispatch}}>\n    {props.children}\n  </Store.Provider>\n};\n","import React from 'react';\nimport './App.css';\nimport {Store} from './Store';\nimport { IAction, IEpisode } from './interfaces';\n\nconst EpisodeList = React.lazy<any>(() => import('./EpisodeList'));\n\nconst URL = \"https://api.tvmaze.com/singlesearch/shows?q=rick-&-morty&embed=episodes\";\n\nconst App = (): JSX.Element => {\n  const { state, dispatch } = React.useContext(Store);\n\n  React.useEffect(() => {\n    state.episodes.length === 0 && fetchDataAction()\n  });\n\n  // get episodes data\n  const fetchDataAction = async () => {\n    const data = await fetch(URL);\n    const dataJSON = await data.json();\n    return dispatch({\n      type: 'FETCH_DATA',\n      payload: dataJSON._embedded.episodes,\n    })\n  };\n\n  const episodeInFav = (episode: IEpisode) => {\n    return state.favourites.includes(episode);\n  };\n\n  // add to favourites or remove if it is fav already\n  const toggleFavAction = (episode: IEpisode): IAction => {\n    // const episodeInFav = state.favourites.includes(episode);\n    let dispatchObj = {\n      type: 'ADD_FAV',\n      payload: episode,\n    };\n    if (episodeInFav(episode)) {\n      // filter items and remove the one with the episode id\n      const favWithoutEpisode = state.favourites.filter((fav: IEpisode) => fav.id !== episode.id);\n      dispatchObj = {\n        type: 'REMOVE_FAV',\n        payload: favWithoutEpisode,\n      }\n    }\n    return dispatch(dispatchObj);\n  };\n\n  const props = {\n    episodes: state.episodes,\n    toggleFavAction,\n    episodeInFav,\n  };\n\n  return (\n    <React.Fragment>\n      {console.log(state)}\n      <header className=\"header\">\n        <div>\n          <h1>Rick and Morty</h1>\n          <p>Pick your favourite episode!</p>\n        </div>\n        <div>\n          Favourite(s): {state.favourites.length}\n        </div>\n      </header>\n      <React.Suspense fallback={<div>loading ... </div>}>\n        <section className=\"episode-layout\">\n          <EpisodeList {...props} />\n        </section>\n      </React.Suspense>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { StoreProvider} from './Store';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StoreProvider>\n    <App />\n  </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}